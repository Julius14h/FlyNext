{
	"info": {
		"_postman_id": "f8065a17-80c1-4ae0-b560-98d95f964217",
		"name": "FlyNext",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39493501"
	},
	"item": [
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// generated by chatgpt\r\n{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"userName\": \"johndoe123\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"password\": \"securepassword123\",\r\n  \"profilePicture\": \"https://example.com/profile.jpg\",\r\n  \"phoneNumber\": \"+14165551234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user after deleting user1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// generated by chatgpt\r\n{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"userName\": \"johndoe\",\r\n  \"email\": \"johndoe1234@example.com\",\r\n  \"password\": \"password\",\r\n  \"profilePicture\": \"https://example.com/profile.jpg\",\r\n  \"phoneNumber\": \"+14165551234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    if (jsonData.accessToken) {\r",
									"        pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
									"\r",
									"    } else {\r",
									"        console.error(\"No accessToken found in response.\");\r",
									"    }\r",
									"\r",
									"    if (jsonData.userId) { \r",
									"        pm.environment.set(\"userId\", jsonData.userId);\r",
									"    } else {\r",
									"        console.error(\"No user ID found in response.\");\r",
									"    }\r",
									"\r",
									"    if (jsonData.refreshToken) {\r",
									"        pm.environment.set(\"refreshToken\", jsonData.refreshToken);\r",
									"    } else {\r",
									"        console.error(\"No refreshToken found in response.\");\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Login failed:\", pm.response.text());\r",
									"}\r",
									"// generated by chat gpt"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"password\",\r\n    \"userName\": \"johndoe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    if (jsonData.accessToken) {\r",
									"        pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
									"\r",
									"    } else {\r",
									"        console.error(\"No accessToken found in response.\");\r",
									"    }\r",
									"\r",
									"    if (jsonData.userId) { \r",
									"        pm.environment.set(\"userId\", jsonData.userId);\r",
									"    } else {\r",
									"        console.error(\"No user ID found in response.\");\r",
									"    }\r",
									"\r",
									"    if (jsonData.refreshToken) {\r",
									"        pm.environment.set(\"refreshToken\", jsonData.refreshToken);\r",
									"    } else {\r",
									"        console.error(\"No refreshToken found in response.\");\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Login failed:\", pm.response.text());\r",
									"}\r",
									"// generated by chat gpt"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"password2\",\r\n    \"userName\": \"janesmith\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    if (jsonData.accessToken) {\r",
									"        pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
									"\r",
									"    } else {\r",
									"        console.error(\"No accessToken found in response.\");\r",
									"    }\r",
									"\r",
									"    if (jsonData.userId) { \r",
									"        pm.environment.set(\"userId\", jsonData.userId);\r",
									"    } else {\r",
									"        console.error(\"No user ID found in response.\");\r",
									"    }\r",
									"\r",
									"    if (jsonData.refreshToken) {\r",
									"        pm.environment.set(\"refreshToken\", jsonData.refreshToken);\r",
									"    } else {\r",
									"        console.error(\"No refreshToken found in response.\");\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Login failed:\", pm.response.text());\r",
									"}\r",
									"// generated by chat gpt"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"password\",\r\n    \"email\": \"john@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/protected/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"protected",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/// generated from grok\r\n{\r\n  \"email\": \"new.email@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/protected/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"protected",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}protected/users/{{userId}}",
							"host": [
								"{{base_url}}protected"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hotel Search",
			"item": [
				{
					"name": "Get hotel by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotels/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotels",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for hotel with parameters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}hotels/search?checkIn=2025-03-1&checkOut=2025-03-12&city=Atlanta&starRating=4&minPrice=50&maxPrice=200",
							"host": [
								"{{base_url}}hotels"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "checkIn",
									"value": "2025-03-1"
								},
								{
									"key": "checkOut",
									"value": "2025-03-12"
								},
								{
									"key": "city",
									"value": "Atlanta"
								},
								{
									"key": "starRating",
									"value": "4"
								},
								{
									"key": "minPrice",
									"value": "50"
								},
								{
									"key": "maxPrice",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get room availability by dates",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}hotels/1/availability?checkIn=2025-04-1&checkOut=2025-04-2",
							"host": [
								"{{base_url}}hotels"
							],
							"path": [
								"1",
								"availability"
							],
							"query": [
								{
									"key": "checkIn",
									"value": "2025-04-1"
								},
								{
									"key": "checkOut",
									"value": "2025-04-2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Get notifications unread",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}protected/users/{{userId}}/notifications/unread",
							"host": [
								"{{base_url}}protected"
							],
							"path": [
								"users",
								"{{userId}}",
								"notifications",
								"unread"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get notifications list",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}protected/users/{{userId}}/notifications",
							"host": [
								"{{base_url}}protected"
							],
							"path": [
								"users",
								"{{userId}}",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark a notification as read",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"read\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}protected/users/{{userId}}/notifications/2",
							"host": [
								"{{base_url}}protected"
							],
							"path": [
								"users",
								"{{userId}}",
								"notifications",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark a notification as unread",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"unread\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}protected/users/{{userId}}/notifications/2",
							"host": [
								"{{base_url}}protected"
							],
							"path": [
								"users",
								"{{userId}}",
								"notifications",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete notification",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}protected/users/{{userId}}/notifications/2",
							"host": [
								"{{base_url}}protected"
							],
							"path": [
								"users",
								"{{userId}}",
								"notifications",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Make booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Extract the booking ID\r",
									"const bookingId = response.booking.id;\r",
									"\r",
									"// Extract the hotel ID (assuming it's from the first hotel booking item)\r",
									"const hotelItem = response.booking.bookingItems.find(item => item.type === \"HOTEL\");\r",
									"const hotelId = hotelItem ? hotelItem.hotelId : null;\r",
									"\r",
									"// Log to console (optional, for debugging)\r",
									"console.log(\"Booking ID:\", bookingId);\r",
									"console.log(\"Hotel ID:\", hotelId);\r",
									"\r",
									"// Store them as Postman environment variables (optional, for use in other requests)\r",
									"pm.environment.set(\"bookingId\", bookingId);\r",
									"pm.environment.set(\"hotelId\", hotelId);\r",
									"\r",
									"// Add tests to verify the extraction (optional)\r",
									"pm.test(\"Booking ID is extracted\", function () {\r",
									"    pm.expect(bookingId).to.be.a(\"number\"); // Ensure it’s a number\r",
									"});\r",
									"\r",
									"pm.test(\"Hotel ID is extracted\", function () {\r",
									"    pm.expect(hotelId).to.be.a(\"number\"); // Ensure it's a number\r",
									"    pm.expect(hotelId).to.equal(1);       // Verify it matches expected value\r",
									"});\r",
									"// generated by chatgpt"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"passportNumber\": 123239934,\r\n    \"bookingItems\": [\r\n        {\r\n            \"type\": \"FLIGHT\",\r\n            \"price\": 10,\r\n            \"referenceId\": \"f572ee8c-7db6-47ef-ac7d-fe1405c31323\",\r\n            \"status\": \"CONFIRMED\"\r\n        },\r\n        {\r\n            \"type\": \"HOTEL\",\r\n            \"hotelId\": 1,\r\n            \"roomTypeId\": 1,\r\n            \"startDate\": \"2024-11-18\",\r\n            \"endDate\": \"2024-11-19\",\r\n            \"price\": 20,\r\n            \"status\": \"CONFIRMED\"\r\n        }\r\n    ],\r\n    \"totalPrice\": 10.0,\r\n    \"paymentDetails\": \"card\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/bookings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/bookings/{{bookingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"bookings",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get flights",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/flights?source=Toronto&destination=Atlanta&dates=2024-11-18,2024-11-19",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"flights"
							],
							"query": [
								{
									"key": "source",
									"value": "Toronto"
								},
								{
									"key": "destination",
									"value": "Atlanta"
								},
								{
									"key": "dates",
									"value": "2024-11-18,2024-11-19",
									"description": "comma seperated list"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify booking",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/bookings/{{bookingId}}/verify",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"bookings",
								"{{bookingId}}",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get invoice pdf",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/bookings/{{bookingId}}/invoice",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"bookings",
								"{{bookingId}}",
								"invoice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete booking item",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/bookings/items/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"bookings",
								"items",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete booking",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/bookings/{{bookingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"bookings",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Proxy",
			"item": [
				{
					"name": "Get airlines",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/airlines",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cities",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/cities",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get airports",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/airports",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"airports"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hotels",
			"item": [
				{
					"name": "Bookings",
					"item": [
						{
							"name": "Cancel Booking",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/hotels/{{hotelId}}/bookings/{{bookingId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"hotels",
										"{{hotelId}}",
										"bookings",
										"{{bookingId}}"
									]
								},
								"description": "Cancel a specific booking"
							},
							"response": []
						},
						{
							"name": "Get All Bookings for Hotel",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/hotels/{{hotelId}}/bookings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"hotels",
										"{{hotelId}}",
										"bookings"
									]
								},
								"description": "Fetch all bookings for a specific hotel"
							},
							"response": []
						},
						{
							"name": "Get Bookings with Combined Filters",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/hotels/{{hotelId}}/bookings?date=2024-11-18&roomTypeId=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"hotels",
										"{{hotelId}}",
										"bookings"
									],
									"query": [
										{
											"key": "date",
											"value": "2024-11-18"
										},
										{
											"key": "roomTypeId",
											"value": "1"
										}
									]
								},
								"description": "Fetch bookings with combined date and room type filters"
							},
							"response": []
						},
						{
							"name": "Get Bookings by Room Type",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/hotels/1/bookings?roomTypeId=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"hotels",
										"1",
										"bookings"
									],
									"query": [
										{
											"key": "roomTypeId",
											"value": "1"
										}
									]
								},
								"description": "Fetch bookings for a specific room type"
							},
							"response": []
						}
					]
				},
				{
					"name": "Create hotel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Check if ID exists and store it as an environment variable\r",
									"if (response.id) {\r",
									"    pm.environment.set(\"hotelId\", response.id);\r",
									"    console.log(\"Hotel ID saved:\", response.id);\r",
									"} else {\r",
									"    console.error(\"Hotel ID not found in response\");\r",
									"}\r",
									"// generated by chatgpt"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJmaXJzdE5hbWUiOiJKb2huIiwibGFzdE5hbWUiOiJEb2UiLCJlbWFpbCI6ImpvaG4uZG9lQGV4YW1wbGUuY29tIn0sImlhdCI6MTc0MTM5MDQwNCwiZXhwIjoxNzQxMzk0MDA0fQ.m7AsgOoYJi6FwMyevsLXCYpumW3KI4-fvX9DzhYL5bA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application.json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer 12u3192jklrf",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Grand Hotel\",\r\n  \"cityId\": 1,\r\n  \"address\": \"123 Main St\",\r\n  \"latitude\": 40.7128,\r\n  \"longitude\": -74.0060,\r\n  \"starRating\": 5,\r\n  \"logo\": \"https://example.com/logos/toronto-grand.png\",\r\n  \"ownerId\": {{userId}},\r\n  \"amenities\": \"pool\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/hotels",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookings by Date",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotels/{{hotelId}}/bookings?date=2024-11-18",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotels",
								"{{hotelId}}",
								"bookings"
							],
							"query": [
								{
									"key": "date",
									"value": "2024-11-18"
								}
							]
						},
						"description": "Fetch bookings for a specific date"
					},
					"response": []
				}
			]
		},
		{
			"name": "RoomType",
			"item": [
				{
					"name": "Get bookings by date and roomType",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotels/1/bookings?date=2024-11-18&roomtType=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotels",
								"1",
								"bookings"
							],
							"query": [
								{
									"key": "date",
									"value": "2024-11-18"
								},
								{
									"key": "roomtType",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create roomType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Extract and save roomTypeId\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.environment.set(\"roomTypeId\", responseData.id);\r",
									"    pm.expect(responseData).to.have.property(\"id\");\r",
									"});\r",
									"// generated from chatgpt"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Deluxe Room\",\r\n  \"pricePerNight\": 150,\r\n  \"amenities\": \"wifi, tv, mini-fridge\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/hotels/{{hotelId}}/room-types",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotels",
								"{{hotelId}}",
								"room-types"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}