openapi: 3.0.3
info:
  title: FlyNext
  version: 1.0.0
  contact: {}
servers:
  - url: http://localhost
  - url: '{{base_url}}protected'
  - url: '{{base_url}}hotels'
paths:
  /api/users:
    post:
      tags:
        - Accounts
      summary: Create user
      description: Create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            examples:
              Create user:
                value: "// generated by chatgpt\r\n{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"userName\": \"johndoe123\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"password\": \"securepassword123\",\r\n  \"profilePicture\": \"https://example.com/profile.jpg\",\r\n  \"phoneNumber\": \"+14165551234\"\r\n}"
              Create user after deleting user1:
                value: "// generated by chatgpt\r\n{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"userName\": \"johndoe\",\r\n  \"email\": \"johndoe1234@example.com\",\r\n  \"password\": \"password\",\r\n  \"profilePicture\": \"https://example.com/profile.jpg\",\r\n  \"phoneNumber\": \"+14165551234\"\r\n}"
      responses:
        '200':
          description: ''
  /api/users/login:
    post:
      tags:
        - Accounts
      summary: Login with username
      description: Login with username
      operationId: loginWithUsername
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: password
            examples:
              Login as User 2:
                value:
                  password: password2
                  userName: janesmith
              Login with email:
                value:
                  email: john@example.com
                  password: password
              Login with username:
                value:
                  password: password
                  userName: johndoe
      responses:
        '200':
          description: ''
  /api/protected/users/1:
    get:
      tags:
        - Accounts
      summary: Get profile
      description: Get profile
      operationId: getProfile
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    put:
      tags:
        - Accounts
      summary: Edit profile
      description: Edit profile
      operationId: editProfile
      requestBody:
        content:
          application/json:
            examples:
              Edit profile:
                value: "/// generated from grok\r\n{\r\n  \"email\": \"new.email@example.com\"\r\n}"
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /users/{userId}:
    delete:
      tags:
        - Accounts
      summary: Delete user
      description: Delete user
      operationId: deleteUser
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
  /api/hotels/2:
    get:
      tags:
        - Hotel Search
      summary: Get hotel by ID
      description: Get hotel by ID
      operationId: getHotelById
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /search:
    get:
      tags:
        - Hotel Search
      summary: Search for hotel with parameters
      description: Search for hotel with parameters
      operationId: searchForHotelWithParameters
      parameters:
        - name: checkIn
          in: query
          schema:
            type: string
            example: 2025-03-1
        - name: checkOut
          in: query
          schema:
            type: string
            example: '2025-03-12'
        - name: city
          in: query
          schema:
            type: string
            example: Atlanta
        - name: starRating
          in: query
          schema:
            type: string
            example: '4'
        - name: minPrice
          in: query
          schema:
            type: string
            example: '50'
        - name: maxPrice
          in: query
          schema:
            type: string
            example: '200'
      responses:
        '200':
          description: ''
  /1/availability:
    get:
      tags:
        - Hotel Search
      summary: Get room availability by dates
      description: Get room availability by dates
      operationId: getRoomAvailabilityByDates
      parameters:
        - name: checkIn
          in: query
          schema:
            type: string
            example: 2025-04-1
        - name: checkOut
          in: query
          schema:
            type: string
            example: 2025-04-2
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /users/{userId}/notifications/unread:
    get:
      tags:
        - Notifications
      summary: Get notifications unread
      description: Get notifications unread
      operationId: getNotificationsUnread
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
  /users/{userId}/notifications:
    get:
      tags:
        - Notifications
      summary: Get notifications list
      description: Get notifications list
      operationId: getNotificationsList
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
  /users/{userId}/notifications/2:
    put:
      tags:
        - Notifications
      summary: Mark a notification as read
      description: Mark a notification as read
      operationId: markANotificationAsRead
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  example: unread
            examples:
              Mark a notification as read:
                value:
                  action: read
              Mark a notification as unread:
                value:
                  action: unread
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    delete:
      tags:
        - Notifications
      summary: Delete notification
      description: Delete notification
      operationId: deleteNotification
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
  /api/bookings:
    post:
      tags:
        - Booking
      summary: Make booking
      description: Make booking
      operationId: makeBooking
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingItems:
                  type: array
                  items:
                    type: object
                    properties:
                      endDate:
                        type: string
                        example: '2024-11-19'
                      hotelId:
                        type: number
                        example: 1
                      price:
                        type: number
                        example: 10
                      referenceId:
                        type: string
                        example: f572ee8c-7db6-47ef-ac7d-fe1405c31323
                      roomTypeId:
                        type: number
                        example: 1
                      startDate:
                        type: string
                        example: '2024-11-18'
                      status:
                        type: string
                        example: CONFIRMED
                      type:
                        type: string
                        example: FLIGHT
                  example:
                    - price: 10
                      referenceId: f572ee8c-7db6-47ef-ac7d-fe1405c31323
                      status: CONFIRMED
                      type: FLIGHT
                    - endDate: '2024-11-19'
                      hotelId: 1
                      price: 20
                      roomTypeId: 1
                      startDate: '2024-11-18'
                      status: CONFIRMED
                      type: HOTEL
                passportNumber:
                  type: number
                  example: 123239934
                paymentDetails:
                  type: string
                  example: card
                totalPrice:
                  type: number
                  example: 10
            examples:
              Make booking:
                value:
                  bookingItems:
                    - price: 10
                      referenceId: f572ee8c-7db6-47ef-ac7d-fe1405c31323
                      status: CONFIRMED
                      type: FLIGHT
                    - endDate: '2024-11-19'
                      hotelId: 1
                      price: 20
                      roomTypeId: 1
                      startDate: '2024-11-18'
                      status: CONFIRMED
                      type: HOTEL
                  passportNumber: 123239934
                  paymentDetails: card
                  totalPrice: 10
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /api/bookings/{bookingId}:
    get:
      tags:
        - Booking
      summary: Get booking
      description: Get booking
      operationId: getBooking
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    delete:
      tags:
        - Booking
      summary: Delete booking
      description: Delete booking
      operationId: deleteBooking
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: bookingId
        in: path
        required: true
        schema:
          type: string
  /api/flights:
    get:
      tags:
        - Booking
      summary: Get flights
      description: Get flights
      operationId: getFlights
      parameters:
        - name: source
          in: query
          schema:
            type: string
            example: Toronto
        - name: destination
          in: query
          schema:
            type: string
            example: Atlanta
        - name: dates
          in: query
          schema:
            type: string
            example: 2024-11-18,2024-11-19
          description: comma seperated list
      responses:
        '200':
          description: ''
      security:
        - {}
  /api/bookings/{bookingId}/verify:
    get:
      tags:
        - Booking
      summary: Verify booking
      description: Verify booking
      operationId: verifyBooking
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: bookingId
        in: path
        required: true
        schema:
          type: string
  /api/bookings/{bookingId}/invoice:
    get:
      tags:
        - Booking
      summary: Get invoice pdf
      description: Get invoice pdf
      operationId: getInvoicePdf
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: bookingId
        in: path
        required: true
        schema:
          type: string
  /api/bookings/items/4:
    delete:
      tags:
        - Booking
      summary: Delete booking item
      description: Delete booking item
      operationId: deleteBookingItem
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /api/airlines:
    get:
      tags:
        - Proxy
      summary: Get airlines
      description: Get airlines
      operationId: getAirlines
      responses:
        '200':
          description: ''
      security:
        - {}
  /api/cities:
    get:
      tags:
        - Proxy
      summary: Get cities
      description: Get cities
      operationId: getCities
      responses:
        '200':
          description: ''
      security:
        - {}
  /api/airports:
    get:
      tags:
        - Proxy
      summary: Get airports
      description: Get airports
      operationId: getAirports
      responses:
        '200':
          description: ''
      security:
        - {}
  /api/hotels/{hotelId}/bookings/{bookingId}:
    put:
      tags:
        - Hotels
        - Bookings
      summary: Cancel Booking
      description: Cancel a specific booking
      operationId: cancelBooking
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: hotelId
        in: path
        required: true
        schema:
          type: string
      - name: bookingId
        in: path
        required: true
        schema:
          type: string
  /api/hotels/{hotelId}/bookings:
    get:
      tags:
        - Hotels
      summary: Get All Bookings for Hotel
      description: Fetch all bookings for a specific hotel
      operationId: getAllBookingsForHotel
      parameters:
        - name: date
          in: query
          schema:
            type: string
            example: '2024-11-18'
        - name: roomTypeId
          in: query
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: hotelId
        in: path
        required: true
        schema:
          type: string
  /api/hotels/1/bookings:
    get:
      tags:
        - RoomType
      summary: Get Bookings by Room Type
      description: Fetch bookings for a specific room type
      operationId: getBookingsByRoomType
      parameters:
        - name: roomTypeId
          in: query
          schema:
            type: string
            example: '1'
        - name: date
          in: query
          schema:
            type: string
            example: '2024-11-18'
        - name: roomtType
          in: query
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /api/hotels:
    post:
      tags:
        - Hotels
      summary: Create hotel
      description: Create hotel
      operationId: createHotel
      requestBody:
        content:
          application/json:
            examples:
              Create hotel:
                value: "{\r\n  \"name\": \"Grand Hotel\",\r\n  \"cityId\": 1,\r\n  \"address\": \"123 Main St\",\r\n  \"latitude\": 40.7128,\r\n  \"longitude\": -74.0060,\r\n  \"starRating\": 5,\r\n  \"logo\": \"https://example.com/logos/toronto-grand.png\",\r\n  \"ownerId\": {{userId}},\r\n  \"amenities\": \"pool\"\r\n}"
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /api/hotels/{hotelId}/room-types:
    post:
      tags:
        - RoomType
      summary: Create roomType
      description: Create roomType
      operationId: createRoomtype
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amenities:
                  type: string
                  example: wifi, tv, mini-fridge
                name:
                  type: string
                  example: Deluxe Room
                pricePerNight:
                  type: number
                  example: 150
            examples:
              Create roomType:
                value:
                  amenities: wifi, tv, mini-fridge
                  name: Deluxe Room
                  pricePerNight: 150
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: hotelId
        in: path
        required: true
        schema:
          type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: Accounts
  - name: Hotel Search
  - name: Notifications
  - name: Booking
  - name: Proxy
  - name: Hotels
  - name: Bookings
  - name: RoomType
