"use client";

import { useState, useEffect, use } from 'react';
import { useRouter } from 'next/navigation';
import { BuildingOfficeIcon, CalendarIcon, XMarkIcon, PencilIcon } from '@heroicons/react/24/outline';
import RoomTypeForm from '@/components/hotels/RoomTypeForm';
import RoomAvailabilityManager from '@/components/hotels/RoomAvailabilityManager';
import BookingManager from '@/components/hotels/BookingManager';
import EditHotelModal from '@/components/hotels/EditHotelModal';
import { RoomType } from '@/types/hotel';
// generated by cursor
interface Hotel {
  id: number;
  name: string;
  logo: string;
  address: string;
  starRating: number;
  images: string[];
  ownerId: number;
  latitude: number | null;
  longitude: number | null;
  amenities: string[] | string;
  city?: {
    id: number;
    name: string;
    country: string;
  };
  startingPrice?: number;
  rooms?: Room[];
}

interface Room {
  id: number;
  type: string;
  pricePerNight: number;
  amenities: string[];
}

export default function HotelManagementPage({ 
  params 
}: { 
  params: Promise<{ id: string }> 
}) {
  const router = useRouter();
  const resolvedParams = use(params);
  const hotelId = resolvedParams.id;
  const [hotel, setHotel] = useState<Hotel | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'details' | 'rooms' | 'availability' | 'bookings'>('details');
  const [showEditModal, setShowEditModal] = useState(false);
  const [showRoomTypeForm, setShowRoomTypeForm] = useState(false);
  const [selectedRoomType, setSelectedRoomType] = useState<RoomType | null>(null);
  const [roomTypes, setRoomTypes] = useState<RoomType[]>([]);
  const [loadingRoomTypes, setLoadingRoomTypes] = useState(false);
  const [roomTypesError, setRoomTypesError] = useState<string | null>(null);

  useEffect(() => {
    fetchHotelDetails();
  }, [hotelId]);

  const fetchHotelDetails = async () => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem('accessToken');
      if (!token) {
        router.push('/login');
        return;
      }

      const response = await fetch(`/api/hotels/${hotelId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch hotel details');
      }

      const data = await response.json();
      console.log('Fetched hotel data:', data);

      // Transform the data to match our Hotel interface
      const transformedHotel: Hotel = {
        id: data.id,
        name: data.name,
        logo: data.logo,
        address: data.address,
        starRating: data.starRating,
        images: data.images || [],
        ownerId: data.ownerId,
        latitude: data.latitude || null,
        longitude: data.longitude || null,
        amenities: Array.isArray(data.amenities) ? data.amenities : 
                  (typeof data.amenities === 'string' && data.amenities) ? 
                  data.amenities.split(',').map((item: string) => item.trim()).filter(Boolean) : [],
        city: data.city ? {
          id: data.city.id,
          name: data.city.name,
          country: data.city.country
        } : undefined,
        startingPrice: data.startingPrice,
        rooms: data.rooms,
      };

      console.log('Transformed hotel data:', transformedHotel);
      setHotel(transformedHotel);
      
      // Fetch room type images for each room
      const roomTypesWithImages = await Promise.all(
        data.rooms.map(async (room: any) => {
          const imagesResponse = await fetch(`/api/hotels/${hotelId}/room-types/${room.id}/images`, {
            headers: {
              'Authorization': `Bearer ${token}`,
            },
          });
          
          let images: string[] = [];
          if (imagesResponse.ok) {
            const imagesData = await imagesResponse.json();
            images = imagesData.map((img: any) => img.imageUrl);
          }
          
          return {
            id: room.id,
            name: room.type,
            pricePerNight: room.pricePerNight,
            amenities: room.amenities.join(', '),
            images: images,
          };
        })
      );
      
      setRoomTypes(roomTypesWithImages);
    } catch (error) {
      console.error('Error fetching hotel details:', error);
      setError('Failed to fetch hotel details. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleRoomTypeSaved = (roomType: RoomType) => {
    setShowRoomTypeForm(false);
    setSelectedRoomType(null);
    fetchHotelDetails(); // Refresh hotel details to get updated room types
  };

  const handleEditRoomType = (roomType: RoomType) => {
    setSelectedRoomType(roomType);
    setShowRoomTypeForm(true);
  };

  const handleAddRoomType = () => {
    setSelectedRoomType(null);
    setShowRoomTypeForm(true);
  };

  const handleHotelUpdated = (updatedHotel: Hotel) => {
    // Process amenities
    let processedAmenities: string[] = [];
    if (Array.isArray(updatedHotel.amenities)) {
      processedAmenities = updatedHotel.amenities;
    } else if (typeof updatedHotel.amenities === 'string') {
      processedAmenities = updatedHotel.amenities.split(',').map((item: string) => item.trim()).filter(Boolean);
    }
    
    setHotel({
      ...updatedHotel,
      latitude: updatedHotel.latitude || null,
      longitude: updatedHotel.longitude || null,
      city: updatedHotel.city || {
        id: 0,
        name: '',
        country: ''
      },
      amenities: processedAmenities
    });
    setShowEditModal(false);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-teal-500 mx-auto"></div>
          <p className="mt-4 text-gray-600 dark:text-gray-300">Loading hotel details...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-700 text-red-700 dark:text-red-300 px-4 py-3 rounded mb-4">
          {error}
        </div>
        <button
          onClick={() => router.push('/hotels')}
          className="px-4 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition-colors"
        >
          Back to Hotels
        </button>
      </div>
    );
  }

  if (!hotel) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-400 dark:border-yellow-700 text-yellow-700 dark:text-yellow-300 px-4 py-3 rounded mb-4">
          Hotel not found
        </div>
        <button
          onClick={() => router.push('/hotels')}
          className="px-4 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition-colors"
        >
          Back to Hotels
        </button>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center">
          {hotel.logo ? (
            <img src={hotel.logo} alt={hotel.name} className="h-12 w-12 mr-3 rounded-full object-cover" />
          ) : (
            <BuildingOfficeIcon className="h-8 w-8 mr-3 text-teal-600 dark:text-teal-400" />
          )}
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">{hotel.name}</h1>
        </div>
        <div className="flex items-center space-x-4">
          <button
            onClick={() => setShowEditModal(true)}
            className="flex items-center px-4 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition-colors"
          >
            <PencilIcon className="h-5 w-5 mr-2" />
            Edit Hotel
          </button>
          <button
            onClick={() => router.push('/hotels')}
            className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>
      </div>

      {showEditModal && hotel && (
        <EditHotelModal
          isOpen={showEditModal}
          onClose={() => setShowEditModal(false)}
          hotel={{
            id: hotel.id,
            name: hotel.name,
            logo: hotel.logo,
            address: hotel.address,
            starRating: hotel.starRating,
            images: hotel.images,
            ownerId: hotel.ownerId,
            latitude: hotel.latitude,
            longitude: hotel.longitude,
            amenities: Array.isArray(hotel.amenities) ? hotel.amenities : 
                      (typeof hotel.amenities === 'string') ? 
                      hotel.amenities.split(',').map((item: string) => item.trim()).filter(Boolean) : []
          }}
          onHotelUpdated={handleHotelUpdated}
        />
      )}

      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6 transition-colors duration-300">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h2 className="text-xl font-semibold mb-2 text-gray-900 dark:text-white">Hotel Details</h2>
            <p className="text-gray-600 dark:text-gray-300 mb-1">
              <span className="font-medium">Location:</span> {hotel.city?.name ? `${hotel.city.name}, ${hotel.city.country}` : 'Location not specified'}
            </p>
            <p className="text-gray-600 dark:text-gray-300 mb-1">
              <span className="font-medium">Address:</span> {hotel.address || 'Address not specified'}
            </p>
            <p className="text-gray-600 dark:text-gray-300 mb-1">
              <span className="font-medium">Star Rating:</span> {hotel.starRating} stars
            </p>
            <p className="text-gray-600 dark:text-gray-300 mb-1">
              <span className="font-medium">Amenities:</span> {Array.isArray(hotel.amenities) ? hotel.amenities.join(', ') : hotel.amenities || 'No amenities specified'}
            </p>
            <p className="text-gray-600 dark:text-gray-300 mb-1">
              <span className="font-medium">Starting Price:</span> ${hotel.startingPrice || 'N/A'} per night
            </p>
            {hotel.latitude && hotel.longitude && (
              <p className="text-gray-600 dark:text-gray-300 mb-1">
                <span className="font-medium">Coordinates:</span> {hotel.latitude}, {hotel.longitude}
              </p>
            )}
            {hotel.images && hotel.images.length > 0 && (
              <div className="mt-4">
                <p className="font-medium mb-2 text-gray-900 dark:text-white">Hotel Images:</p>
                <div className="grid grid-cols-2 gap-2">
                  {hotel.images.map((image, index) => (
                    <img
                      key={index}
                      src={image}
                      alt={`Hotel image ${index + 1}`}
                      className="w-full h-32 object-cover rounded-md"
                    />
                  ))}
                </div>
              </div>
            )}
          </div>
          <div>
            <h2 className="text-xl font-semibold mb-2 text-gray-900 dark:text-white">Room Types</h2>
            {roomTypes.length === 0 ? (
              <p className="text-gray-500 dark:text-gray-400">No room types defined yet.</p>
            ) : (
              <div className="space-y-2">
                {roomTypes.map((room) => (
                  <div key={room.id} className="flex justify-between items-center p-2 bg-gray-50 dark:bg-gray-700 rounded transition-colors duration-300">
                    <div>
                      <p className="font-medium text-gray-900 dark:text-white">{room.name}</p>
                      <p className="text-sm text-gray-600 dark:text-gray-300">${room.pricePerNight} per night</p>
                    </div>
                    <button
                      onClick={() => handleEditRoomType(room)}
                      className="text-teal-600 dark:text-teal-400 hover:text-teal-800 dark:hover:text-teal-300 text-sm transition-colors duration-300"
                    >
                      Edit
                    </button>
                  </div>
                ))}
              </div>
            )}
            <button
              onClick={handleAddRoomType}
              className="mt-4 px-4 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition-colors"
            >
              Add Room Type
            </button>
          </div>
        </div>
      </div>

      <div className="mb-6">
        <div className="border-b border-gray-200 dark:border-gray-700">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('details')}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300 ${
                activeTab === 'details'
                  ? 'border-teal-500 text-teal-600 dark:text-teal-400'
                  : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'
              }`}
            >
              Details
            </button>
            <button
              onClick={() => setActiveTab('rooms')}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300 ${
                activeTab === 'rooms'
                  ? 'border-teal-500 text-teal-600 dark:text-teal-400'
                  : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'
              }`}
            >
              Room Types
            </button>
            <button
              onClick={() => setActiveTab('availability')}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300 ${
                activeTab === 'availability'
                  ? 'border-teal-500 text-teal-600 dark:text-teal-400'
                  : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'
              }`}
            >
              Availability
            </button>
            <button
              onClick={() => setActiveTab('bookings')}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300 ${
                activeTab === 'bookings'
                  ? 'border-teal-500 text-teal-600 dark:text-teal-400'
                  : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'
              }`}
            >
              Bookings
            </button>
          </nav>
        </div>
      </div>

      {showRoomTypeForm && (
        <div className="mb-6">
          <RoomTypeForm
            hotelId={parseInt(hotelId)}
            roomType={selectedRoomType || undefined}
            onRoomTypeSaved={handleRoomTypeSaved}
            onCancel={() => {
              setShowRoomTypeForm(false);
              setSelectedRoomType(null);
            }}
          />
        </div>
      )}

      {activeTab === 'details' && (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 transition-colors duration-300">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Hotel Details</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-lg font-medium mb-4 text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-700 pb-2">Basic Information</h3>
              <div className="space-y-3">
                <div className="flex items-start">
                  <span className="font-medium text-teal-600 dark:text-teal-400 min-w-[120px]">Name:</span>
                  <span className="text-gray-800 dark:text-gray-200">{hotel.name}</span>
                </div>
                
                {hotel.logo && (
                  <div className="flex items-start">
                    <span className="font-medium text-teal-600 dark:text-teal-400 min-w-[120px]">Logo:</span>
                    <div className="mt-1">
                      <img src={hotel.logo} alt={hotel.name} className="h-16 w-16 rounded-full object-cover border-2 border-gray-200 dark:border-gray-700" />
                    </div>
                  </div>
                )}
                
                <div className="flex items-start">
                  <span className="font-medium text-teal-600 dark:text-teal-400 min-w-[120px]">Location:</span>
                  <span className="text-gray-800 dark:text-gray-200">
                    {hotel.city?.name ? `${hotel.city.name}, ${hotel.city.country}` : 'Location not specified'}
                  </span>
                </div>
                
                <div className="flex items-start">
                  <span className="font-medium text-teal-600 dark:text-teal-400 min-w-[120px]">Address:</span>
                  <span className="text-gray-800 dark:text-gray-200">{hotel.address || 'Address not specified'}</span>
                </div>
                
                <div className="flex items-center">
                  <span className="font-medium text-teal-600 dark:text-teal-400 min-w-[120px]">Star Rating:</span>
                  <div className="flex">
                    {[...Array(hotel.starRating)].map((_, i) => (
                      <svg key={i} className="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                      </svg>
                    ))}
                  </div>
                </div>
                
                <div className="flex items-start">
                  <span className="font-medium text-teal-600 dark:text-teal-400 min-w-[120px]">Amenities:</span>
                  <div className="flex flex-wrap gap-2">
                    {Array.isArray(hotel.amenities) ? (
                      hotel.amenities.map((amenity, index) => (
                        <span key={index} className="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full text-sm">
                          {amenity}
                        </span>
                      ))
                    ) : (
                      <span className="text-gray-800 dark:text-gray-200">{hotel.amenities || 'No amenities specified'}</span>
                    )}
                  </div>
                </div>
                
                <div className="flex items-center">
                  <span className="font-medium text-teal-600 dark:text-teal-400 min-w-[120px]">Starting Price:</span>
                  <span className="text-gray-800 dark:text-gray-200 font-semibold">
                    {hotel.startingPrice ? `$${hotel.startingPrice}` : 'N/A'} per night
                  </span>
                </div>
                
                {hotel.latitude && hotel.longitude && (
                  <div className="flex items-start">
                    <span className="font-medium text-teal-600 dark:text-teal-400 min-w-[120px]">Coordinates:</span>
                    <span className="text-gray-800 dark:text-gray-200">
                      {hotel.latitude}, {hotel.longitude}
                    </span>
                  </div>
                )}
              </div>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-4 text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-700 pb-2">Room Types</h3>
              {roomTypes.length === 0 ? (
                <p className="text-gray-500 dark:text-gray-400">No room types defined yet.</p>
              ) : (
                <div className="space-y-3">
                  {roomTypes.map((room) => (
                    <div key={room.id} className="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg transition-colors duration-300 border border-gray-200 dark:border-gray-600">
                      <p className="font-medium text-gray-900 dark:text-white">{room.name}</p>
                      <p className="text-sm text-gray-600 dark:text-gray-300">${room.pricePerNight} per night</p>
                      <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">Amenities: {room.amenities}</p>
                      {room.images && room.images.length > 0 && (
                        <div className="mt-2 grid grid-cols-2 gap-2">
                          {room.images.map((image, index) => (
                            <img 
                              key={index} 
                              src={image} 
                              alt={`${room.name} image ${index + 1}`} 
                              className="w-full h-24 object-cover rounded-md"
                            />
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {activeTab === 'rooms' && (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 transition-colors duration-300">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Room Types</h2>
            <button
              onClick={handleAddRoomType}
              className="px-4 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition-colors"
            >
              Add Room Type
            </button>
          </div>
          
          {roomTypes.length === 0 ? (
            <div className="text-center py-8 text-gray-500 dark:text-gray-400">
              No room types defined yet. Add your first room type to get started.
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {roomTypes.map((room) => (
                <div key={room.id} className="border dark:border-gray-700 rounded-lg p-4 transition-colors duration-300">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="text-lg font-medium text-gray-900 dark:text-white">{room.name}</h3>
                    <button
                      onClick={() => handleEditRoomType(room)}
                      className="text-teal-600 dark:text-teal-400 hover:text-teal-800 dark:hover:text-teal-300 text-sm transition-colors duration-300"
                    >
                      Edit
                    </button>
                  </div>
                  <p className="text-gray-600 dark:text-gray-300 mb-2">${room.pricePerNight} per night</p>
                  <p className="text-sm text-gray-500 dark:text-gray-400 mb-2">Amenities: {room.amenities}</p>
                  {room.images && room.images.length > 0 ? (
                    <div className="grid grid-cols-2 gap-2 mt-2">
                      {room.images.slice(0, 2).map((image, index) => (
                        <img
                          key={index}
                          src={image}
                          alt={`${room.name} image ${index + 1}`}
                          className="w-full h-24 object-cover rounded"
                        />
                      ))}
                    </div>
                  ) : (
                    <div className="bg-gray-100 dark:bg-gray-700 h-24 rounded flex items-center justify-center transition-colors duration-300">
                      <p className="text-gray-400 dark:text-gray-500 text-sm">No images</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {activeTab === 'availability' && (
        <RoomAvailabilityManager
          hotelId={parseInt(hotelId)}
          roomTypes={roomTypes}
        />
      )}

      {activeTab === 'bookings' && (
        <BookingManager
          hotelId={parseInt(hotelId)}
          roomTypes={roomTypes}
        />
      )}
    </div>
  );
} 