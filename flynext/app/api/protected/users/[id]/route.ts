import prisma from "@/utils/prisma";
import { authenticate } from "@/utils/auth";
import { NextResponse } from "next/server";
import { IDParam } from "@/utils/types";
import { validateParams } from "@/utils/validateParams";

export async function GET(request: Request, { params }: IDParam) {
    try {
        const authenticated = authenticate(request);
        if (!authenticated) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }
        const [id, err] = validateParams((await params).id)
        if (err) return err
        const user = await prisma.user.findUnique({
            where: { id: Number(id) },
            select: {
                firstName: true,
                lastName: true,
                email: true,
                profilePicture: true,
                phoneNumber: true,
            },
        });
        if (!user) {
            return NextResponse.json({ message: "User not found" }, { status: 404 });
        } else {
            return NextResponse.json(user);
        }
    } catch (error) {
        return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
    }

}

// generated from grok
export async function PUT(request: Request, { params }: IDParam) {
    try {
        const authenticated = authenticate(request);
        if (!authenticated) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }
        const [id, err] = validateParams((await params).id)
        if (err) return err
        const userId = Number(id);
        if (authenticated.user !== userId) {
            return NextResponse.json(
                { error: 'Forbidden: You can only update your own profile' },
                { status: 403 }
            );
        }

        const body = await request.json();
        const { firstName, lastName, email, profilePicture, phoneNumber } = body;

        const updatedUser = await prisma.user.update({
            where: { id: userId },
            data: {
                firstName: firstName || undefined,
                lastName: lastName || undefined,
                email: email || undefined,
                profilePicture: profilePicture || undefined,
                phoneNumber: phoneNumber || undefined,
            },
            select: {
                firstName: true,
                lastName: true,
                email: true,
                profilePicture: true,
                phoneNumber: true,
            },
        });

        return NextResponse.json(updatedUser, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
    }
}

// generated by grok
export async function DELETE(request: Request, { params }: IDParam) {
    try {
        const authenticated = authenticate(request);
        if (!authenticated) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }
        const [id, err] = validateParams((await params).id)
        if (err) return err
        const userId = Number(id);
        if (authenticated.user !== userId) {
            return NextResponse.json(
                { error: 'Forbidden: You can only delete your own profile' },
                { status: 403 }
            );
        }

        const user = await prisma.user.findUnique({
            where: { id: userId },
        });
        if (!user) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 });
        }
        console.log("trying to delete");
        await prisma.user.delete({
            where: { id: userId },
        });
        console.log("delete success");

        return new NextResponse(null, { status: 204 });
    } catch (error) {
        // console.error("Delete failed with error:", {
        //     message: error.message,
        //     code: error.code, // Prisma-specific error code
        //     stack: error.stack,
        // });
        return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
    }
}