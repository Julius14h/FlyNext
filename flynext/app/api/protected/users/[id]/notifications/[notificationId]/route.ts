import { NextResponse } from 'next/server';
import  prisma from "@/utils/prisma";
import { authenticate } from '@/utils/auth';
import { validateParams } from '@/utils/validateParams';
import { Params } from '@/utils/types';

// generated by grok
export async function PUT(request: Request, { params }: { params: Promise<{id: string, notificationId: string}> }) {
  try {
  const authenticated = authenticate(request);
  if (!authenticated) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  const authenticatedUser = authenticated; 
  
  const param = (await params);
  const [id, id_err] = validateParams(param.id)
  if (id_err) return id_err
  
  const [notificationId, notificationId_err] = validateParams(param.notificationId)
  if (notificationId_err) return notificationId_err

  const userId = Number(id);
  const notificationIntId = Number(notificationId);
  if (authenticatedUser.user !== userId) {
    return NextResponse.json({ error: 'Forbidden...' }, { status: 403 });
  }
  const notification = await prisma.notification.findUnique({ where: { id: notificationIntId } });
  if (!notification || notification.userId !== userId) {
    return NextResponse.json({ error: 'Notification not found' }, { status: 404 });
  }
  const { action } = await request.json(); 
  const readStatus = action === 'unread' ? false : true; // if action === read, isRead is set to true
  const updatedNotification = await prisma.notification.update({
    where: { id: notificationIntId },
    data: { isRead: readStatus },
    select: { id: true, message: true, createdAt: true, isRead: true },
  });
  return NextResponse.json(updatedNotification, { status: 200 });
} catch (error) {
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
} 

}


// generated by grok
export async function DELETE(request: Request, { params }: Params<{id: string, notificationId: string}>) {
  try {
  const authenticated = authenticate(request);
  if (!authenticated) {
    return NextResponse.json({error: "Unauthorized"}, { status: 401 });
  }
  const {id, notificationId} = await params;
  const userId = Number(id);
  if (authenticated.user !== userId) {
    return NextResponse.json(
      { error: 'Forbidden: You can only delete your own notification' },
      { status: 403 }
    );
  }

  const notification = await prisma.notification.findUnique({
    where: { id: Number(notificationId) },
  });
  
  if (!notification || notification.userId !== userId) {
    return NextResponse.json({ error: 'Notification not found or not yours' }, { status: 404 });
  }

  await prisma.notification.delete({
    where: { id: Number(notificationId) },
  });
  
  return new NextResponse(null, { status: 204 });
} catch (error){
  return NextResponse.json({error: "Internal Server Error"}, {status: 500});
}
}