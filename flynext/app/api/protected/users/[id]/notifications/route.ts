import prisma from "@/utils/prisma";
import { authenticate } from "@/utils/auth";
import { NextResponse } from "next/server";
import { IDParam, Params } from "@/utils/types";
import { validateParams } from "@/utils/validateParams";

// generated by grok
export async function GET(request: Request, { params }: IDParam) {
    try {
        const authenticated = authenticate(request);
        if (!authenticated) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }
        const [id, err] = validateParams((await params).id)
        if (err) return err

        const userId = Number(id);
        if (authenticated.user !== userId) {
            return NextResponse.json(
                { error: 'Forbidden: You cannot get the notifications of another user' },
                { status: 403 }
            );
        }
        const notifications = await prisma.user.findMany({
            where: { id: userId },
            select: {
                notifications: true
            },
            orderBy: { createdAt: 'desc' },
        });
        return NextResponse.json(notifications, { status: 200 });
    } catch (error) {
        return NextResponse.json(
            { error: 'Internal Server Error' },
            { status: 500 }
        );
    }

}
