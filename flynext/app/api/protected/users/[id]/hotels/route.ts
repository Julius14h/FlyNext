import { NextResponse } from 'next/server';
import { authenticate } from "@/utils/auth";
import prisma from "@/utils/prisma";
import { Params } from '@/utils/types';
// generated by cursor
export async function GET(
  request: Request,
  { params }: Params<{ id: string }>
) {
  try {
    const payload = authenticate(request);
    if (!payload) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Await the params object
    const { id } = await params;
    const userId = parseInt(id);

    if (payload.user !== userId) {
      return NextResponse.json({ error: 'User ID mismatch' }, { status: 401 });
    }

    console.log('Fetching hotels for user:', id);
    const hotels = await prisma.hotel.findMany({
      where: {
        ownerId: userId,
      },
      include: {
        city: true,
        roomTypes: {
          include: {
            images: true,
            availabilities: true,
          },
        },
        images: true,
      },
    });

    console.log('Found hotels:', hotels);
    
    // Transform the hotels to include images as an array of URLs
    const transformedHotels = hotels.map(hotel => {
      // Ensure images is properly transformed
      const images = Array.isArray(hotel.images) 
        ? hotel.images.map(img => img.imageUrl || '')
        : [];
      
      return {
        ...hotel,
        images,
      };
    });

    return NextResponse.json(transformedHotels);
  } catch (error) {
    console.error('Error fetching hotels:', error);
    return NextResponse.json(
      { 
        error: 'Failed to fetch hotels',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
} 