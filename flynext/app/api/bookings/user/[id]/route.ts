import prisma from "@/utils/prisma";
import { NextResponse } from "next/server";
import { verifyToken } from "@/utils/auth";
import { validateParams } from "@/utils/validateParams";
import { build_query, send_request } from "@/utils/AFS";
import { IDParam } from "@/utils/types";
// generated by cursor
// As a user, I want to view my bookings, so that I can 
// easily access my itinerary and booking information.
export async function GET(request: Request, { params }: IDParam) {
    const token = verifyToken(request);
    if (token instanceof NextResponse) {
        return token;
    }

    const { id: userId } = await params;
    const [userIdValid, err] = validateParams(userId);
    if (err) return err;

    try {
        // Get the user's information
        const user = await prisma.user.findUnique({
            where: { id: userIdValid! },
        });

        if (!user) {
            return NextResponse.json({ error: "User not found" }, { status: 404 });
        }

        // Get all bookings for the user from the local database
        const bookings = await prisma.booking.findMany({
            where: { userId: userIdValid! },
            include: {
                bookingItems: {
                    include: {
                        hotel: {
                            include: {
                                city: true
                            }
                        },
                        roomType: true
                    }
                },
            },
            orderBy: {
                createdAt: 'desc',
            },
        });

        // For each booking, fetch the flight details from AFS
        const bookingsWithFlights = await Promise.all(
            bookings.map(async (booking) => {
                // Get flight booking items
                const flightItems = booking.bookingItems.filter(item => item.referenceId);
                
                // Fetch flight details from AFS for each flight booking
                const flights = await Promise.all(
                    flightItems.map(async (item) => {
                        try {
                            const flight = await send_request(
                                "/bookings/retrieve" + build_query({
                                    lastName: user.lastName,
                                    bookingReference: item.referenceId
                                }),
                                {
                                    method: "GET",
                                }
                            );
                            return flight;
                        } catch (error) {
                            console.error(`Error fetching flight details for booking reference ${item.referenceId}:`, error);
                            return null;
                        }
                    })
                );

                // Filter out any null values (failed requests)
                const validFlights = flights.filter(flight => flight !== null);

                return {
                    ...booking,
                    flights: validFlights,
                };
            })
        );

        return NextResponse.json(bookingsWithFlights, { status: 200 });
    } catch (error) {
        console.error("Error retrieving user bookings:", error);
        return NextResponse.json(
            { error: "Internal server error." },
            { status: 500 }
        );
    }
} 