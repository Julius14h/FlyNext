import { NextRequest, NextResponse } from "next/server";
import prisma from "@/utils/prisma";
import { authenticate } from "@/utils/auth";
import { Params } from "@/utils/types";
// generated by cursor

export async function PUT(request: NextRequest, { params }: Params<{hotelID: string, roomTypeID: string}>) {
  try {
    // Authenticate the user
    const user = await authenticate(request);
    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { hotelID, roomTypeID } = await params;
    const roomTypeId = parseInt(roomTypeID);
    
    if (isNaN(roomTypeId)) {
      return NextResponse.json({ error: "Invalid room type ID" }, { status: 400 });
    }

    const { name, pricePerNight, amenities } = await request.json();

    // Validate request body
    if (!name || !pricePerNight || !amenities) {
      return NextResponse.json(
        { error: "Missing required fields: name, pricePerNight, amenities" },
        { status: 400 }
      );
    }

    // Check if the room type exists and belongs to a hotel owned by the authenticated user
    const roomType = await prisma.roomType.findUnique({
      where: { id: roomTypeId },
      include: { hotel: true }
    });

    if (!roomType) {
      return NextResponse.json({ error: "Room type not found" }, { status: 404 });
    }

    if (roomType.hotel.ownerId !== user.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Update the room type
    const updatedRoomType = await prisma.roomType.update({
      where: { id: roomTypeId },
      data: {
        name,
        pricePerNight,
        amenities,
      },
    });

    return NextResponse.json(updatedRoomType);
  } catch (error) {
    console.error("Error updating room type:", error);
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
} 