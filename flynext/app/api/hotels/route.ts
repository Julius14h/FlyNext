import { NextResponse } from "next/server";
import prisma from '@/utils/prisma';
import { authenticate } from "@/utils/auth"; // Use the existing authenticate function
import { validateParams } from "@/utils/validateParams";
import { Prisma } from "@prisma/client";
// generated by cursor
// GET all hotels
export async function GET() {
  try {
    // Get all hotels with basic information
    const hotels = await prisma.hotel.findMany({
      select: {
        id: true,
        name: true,
        city: true,
        starRating: true,
        amenities: true,
        images: {
          select: { imageUrl: true },
        },
        latitude: true,
        longitude: true,
        ownerId: true,
      },
      orderBy: {
        name: 'asc',
      },
    });

    // Transform the response to include images as an array of URLs
    const transformedHotels = hotels.map(hotel => ({
      ...hotel,
      images: hotel.images.map(img => img.imageUrl),
    }));

    return NextResponse.json({ hotels: transformedHotels });
  } catch (error) {
    console.error("Error fetching hotels:", error);
    return NextResponse.json(
      { error: "Failed to fetch hotels" },
      { status: 500 }
    );
  }
}

type PostBody = { 
    name: string, 
    cityId: string, 
    address: string, 
    latitude: string, 
    longitude: string, 
    starRating: string, 
    logo: string, 
    ownerId: string, 
    amenities: string,
    images: Array<string>,
}
export async function POST(request: Request) {
  try {
    // Parse the request body
    const { 
        name, 
        cityId: cityId_s, 
        address, 
        latitude: latitude_s, 
        longitude: longitude_s, 
        starRating: starRating_s, 
        logo, 
        ownerId: ownerId_s, 
        amenities,
        images  
    } = await request.json() as PostBody;

    // Validate request body
    if (!name || !cityId_s || !address || !starRating_s || !ownerId_s || !amenities) {
      return NextResponse.json(
        { error: "Missing required fields: name, cityId, address, starRating, ownerId, amenities" },
        { status: 400 }
      );
    }
    const [cityId, cityId_err] = validateParams(cityId_s)
    if (cityId_err) return cityId_err

    const [ownerId, ownerId_err] = validateParams(ownerId_s)
    if (ownerId_err) return ownerId_err

    const [latitude, latitude_err] = validateParams(latitude_s)
    if (latitude_err) return latitude_err
    
    const [longitude, longitude_err] = validateParams(longitude_s)
    if (longitude_err) return longitude_err
    
    const [starRating, starRating_err] = validateParams(starRating_s)
    if (starRating_err) return starRating_err
    
    // Ensure the city exists
    const city = await prisma.city.findUnique({
      where: { id: cityId! },
    });

    if (!city) {
      return NextResponse.json({ error: "City not found" }, { status: 404 });
    }

    // Ensure the owner (user) exists
    const owner = await prisma.user.findUnique({
      where: { id: ownerId! },
    });
    if (!owner) {
      return NextResponse.json({ error: "Owner not found" }, { status: 404 });
    }

    await prisma.user.update({
      where: { id: owner.id },
      data: { role: "OWNER" }
    });

    // Ensure images is an array
    const imageArray = Array.isArray(images) ? images : [];
    console.log('Creating hotel with images:', imageArray);
    // Create the hotel
    const hotel = await prisma.hotel.create({
      data: {
        name,
        cityId: cityId!,
        ownerId: ownerId!, // Use the provided ownerId
        address,
        latitude,
        longitude,
        starRating: starRating!,
        logo,
        amenities,
        images: {
          create: imageArray.map(imageUrl => ({ imageUrl })),
        },
      },
      include: {
        images: {
          select: { imageUrl: true },
        },
      },
    });

    return NextResponse.json({
      ...hotel,
      images: hotel.images.map(img => img.imageUrl),
    }, { status: 201 });
  } catch (error) {
    console.error("Error creating hotel:", error);
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
}

