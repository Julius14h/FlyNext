generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// all code below was generated by Grok 3

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum UserRole {
  USER
  OWNER
}

enum ItemStatus {
  CONFIRMED
  CANCELLED
}

enum BookingType {
  FLIGHT
  HOTEL
}

model Booking {
  id             Int           @id @default(autoincrement())
  userId         Int
  status         BookingStatus @default(PENDING)
  totalPrice     Float?
  paymentDetails String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingItems  BookingItem[]
  invoice       Invoice?
  notifications Notification[]
}

model User {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  userName       String   @unique
  email          String   @unique
  role           UserRole @default(USER)
  password       String
  profilePicture String?
  phoneNumber    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  bookings      Booking[]
  hotels        Hotel[]
  notifications Notification[]
}

model BookingItem {
  id          Int        @id @default(autoincrement())
  bookingId   Int
  type        String     // "FLIGHT" or "HOTEL"
  hotelId     Int?
  roomTypeId  Int?
  referenceId String?    // AFS bookingReference
  startDate   DateTime?  // Hotels only
  endDate     DateTime?  // Hotels only
  price       Float?     // Hotels only
  status      ItemStatus @default(CONFIRMED)
  booking     Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade) // Added
  hotel       Hotel?     @relation(fields: [hotelId], references: [id], onDelete: SetNull) // Nullable, so SetNull
  roomType    RoomType?  @relation(fields: [roomTypeId], references: [id], onDelete: SetNull) // Nullable, so SetNull
}

model Invoice {
  id        Int      @id @default(autoincrement())
  bookingId Int      @unique
  filePath  String
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade) 
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookingId Int?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull) // Nullable, so SetNull
}

model Hotel {
  id         Int     @id @default(autoincrement())
  cityId     Int
  ownerId    Int
  name       String
  logo       String?
  address    String
  latitude   Float?
  longitude  Float?
  starRating Int
  amenities  String

  city         City          @relation("CityHotels", fields: [cityId], references: [id])
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  roomTypes    RoomType[]
  bookingItems BookingItem[]
  images       HotelImage[]
}

model RoomType {
  id            Int    @id @default(autoincrement())
  hotelId       Int
  name          String
  pricePerNight Float
  amenities     String

  hotel          Hotel              @relation(fields: [hotelId], references: [id], onDelete: Cascade) 
  bookingItems   BookingItem[]
  availabilities RoomAvailability[]
  images         RoomTypeImage[]
}

model RoomAvailability {
  id             Int      @id @default(autoincrement())
  roomTypeId     Int
  date           DateTime
  availableRooms Int      @default(0)

  roomType RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade) 
}

model HotelImage {
  id       Int    @id @default(autoincrement())
  hotelId  Int
  imageUrl String

  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade) 
}

model RoomTypeImage {
  id         Int    @id @default(autoincrement())
  roomTypeId Int
  imageUrl   String

  roomType RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
}

model City {
  id       Int       @id @default(autoincrement())
  name     String
  country  String
  hotels   Hotel[]   @relation("CityHotels")
  airports Airport[] @relation("CityAirports")
  @@unique([name, country])
}

model Airport {
  id      String @id // AFS UUID
  cityId  Int
  code    String @unique
  name    String
  country String

  city City @relation("CityAirports", fields: [cityId], references: [id])
}