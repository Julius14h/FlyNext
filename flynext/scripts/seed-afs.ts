// whole file generated by grok

//const prisma = require('../utils/prisma');
//const fetch = require('node-fetch');
import prisma from '../utils/prisma.js'; 
import fetch from 'node-fetch'; 
const API_KEY = process.env.AFS_API_KEY;

if (!API_KEY) {
  console.error('Error: AFS_API_KEY not set in .env');
  process.exit(1);
}

async function seedCities() {
  const response = await fetch('https://advanced-flights-system.replit.app/api/cities', {
    headers: { 'x-api-key': API_KEY! },
  });
  const cities = await response.json();
  for (const { city, country } of cities) {
    await prisma.city.upsert({
      where: { name_country: { name: city, country: country } },
      update: {},
      create: { name: city, country },
    });
  }
  console.log('Cities seeded successfully');
}

async function seedAirports() {
  const response = await fetch('https://advanced-flights-system.replit.app/api/airports', {
    headers: { 'x-api-key': API_KEY! },
  });
  const airports = await response.json();
  for (const { id, code, name, city, country } of airports) {
    const cityRecord = await prisma.city.findFirst({ where: { name: city } });
    if (!cityRecord) throw new Error(`City ${city} not found for airport ${code}`);
    await prisma.airport.upsert({
      where: { id },
      update: { code, name, country, cityId: cityRecord.id },
      create: { id, code, name, country, cityId: cityRecord.id },
    });
  }
  console.log('Airports seeded successfully');
}

async function main() {
  try {
    await seedCities();
    await seedAirports();
  } catch (error) {
    console.error('Seeding failed:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();