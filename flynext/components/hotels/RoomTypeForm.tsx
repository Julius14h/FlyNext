import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { XMarkIcon } from '@heroicons/react/24/outline';
import { RoomType } from '@/types/hotel';
// generated by cursor
interface RoomTypeFormProps {
  hotelId: number;
  roomType?: RoomType;
  onRoomTypeSaved: (roomType: RoomType) => void;
  onCancel: () => void;
}

export default function RoomTypeForm({ hotelId, roomType, onRoomTypeSaved, onCancel }: RoomTypeFormProps) {
  const router = useRouter();
  const [formData, setFormData] = useState<RoomType>(roomType || {
    name: '',
    pricePerNight: 0,
    amenities: '',
    images: [],
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [priceError, setPriceError] = useState<string | null>(null);
  const [newAmenity, setNewAmenity] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setPriceError(null);

    // Validate price per night
    if (isNaN(formData.pricePerNight) || formData.pricePerNight < 0) {
      setPriceError('Price per night must be a valid number greater than or equal to 0');
      setLoading(false);
      return;
    }

    try {
      const token = localStorage.getItem('accessToken');
      if (!token) {
        router.push('/login');
        return;
      }

      let savedRoomType;
      
      if (roomType && roomType.id) {
        // Update existing room type
        const response = await fetch(`/api/hotels/${hotelId}/room-types/${roomType.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            name: formData.name,
            pricePerNight: formData.pricePerNight,
            amenities: formData.amenities,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to update room type');
        }

        savedRoomType = await response.json();
      } else {
        // Create new room type
        const response = await fetch(`/api/hotels/${hotelId}/room-types`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            name: formData.name,
            pricePerNight: formData.pricePerNight,
            amenities: formData.amenities,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to save room type');
        }

        savedRoomType = await response.json();
      }
      
      // Then, if there are images, save them to the room type
      if (formData.images && formData.images.length > 0 && savedRoomType && savedRoomType.id) {
        for (const imageUrl of formData.images) {
          const imageResponse = await fetch(`/api/hotels/${hotelId}/room-types/${savedRoomType.id}/images`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify({ imageUrl }),
          });
          
          if (!imageResponse.ok) {
            const errorData = await imageResponse.json();
            throw new Error(errorData.error || 'Failed to save room type image');
          }
        }
      }
      
      onRoomTypeSaved(savedRoomType);
    } catch (error) {
      console.error('Error saving room type:', error);
      setError('Failed to save room type. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files) return;

    const token = localStorage.getItem('accessToken');
    if (!token) {
      router.push('/login');
      return;
    }

    const imageUrls: string[] = [];
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const formData = new FormData();
      formData.append('file', file);

      try {
        const response = await fetch('/api/upload', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData,
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to upload image');
        }

        const data = await response.json();
        imageUrls.push(data.url);
      } catch (error) {
        console.error('Error uploading image:', error);
        setError('Failed to upload one or more images. Please try again.');
      }
    }

    setFormData(prev => ({
      ...prev,
      images: [...(prev.images || []), ...imageUrls],
    }));
  };

  const handleRemoveImage = (index: number) => {
    setFormData(prev => ({
      ...prev,
      images: (prev.images || []).filter((_, i) => i !== index),
    }));
  };

  const handlePriceChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    
    // Allow empty input for better UX
    if (value === '') {
      setFormData(prev => ({ ...prev, pricePerNight: 0 }));
      setPriceError(null);
      return;
    }
    
    // Check if the input is a valid number
    const numValue = parseFloat(value);
    if (isNaN(numValue)) {
      setPriceError('Please enter a valid number');
      setFormData(prev => ({ ...prev, pricePerNight: 0 }));
    } else if (numValue < 0) {
      setPriceError('Price cannot be negative');
      setFormData(prev => ({ ...prev, pricePerNight: 0 }));
    } else {
      setPriceError(null);
      setFormData(prev => ({ ...prev, pricePerNight: numValue }));
    }
  };

  const handleAddAmenity = () => {
    if (newAmenity.trim()) {
      // Convert amenities string to array if it's not already
      const currentAmenities = formData.amenities ? 
        (typeof formData.amenities === 'string' ? 
          formData.amenities.split(',').map(item => item.trim()).filter(Boolean) : 
          [formData.amenities]) : 
        [];
      
      // Add the new amenity
      const updatedAmenities = [...currentAmenities, newAmenity.trim()];
      
      // Update the form data with the new amenities array
      setFormData(prev => ({
        ...prev,
        amenities: updatedAmenities.join(',')
      }));
      
      // Clear the input
      setNewAmenity('');
    }
  };

  const handleRemoveAmenity = (index: number) => {
    // Convert amenities string to array
    const currentAmenities = formData.amenities ? 
      (typeof formData.amenities === 'string' ? 
        formData.amenities.split(',').map(item => item.trim()).filter(Boolean) : 
        [formData.amenities]) : 
      [];
    
    // Remove the amenity at the specified index
    const updatedAmenities = currentAmenities.filter((_, i) => i !== index);
    
    // Update the form data with the new amenities array
    setFormData(prev => ({
      ...prev,
      amenities: updatedAmenities.join(',')
    }));
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' || e.key === ',') {
      e.preventDefault();
      handleAddAmenity();
    }
  };

  // Convert amenities string to array for display
  const amenitiesArray = formData.amenities ? 
    (typeof formData.amenities === 'string' ? 
      formData.amenities.split(',').map(item => item.trim()).filter(Boolean) : 
      [formData.amenities]) : 
    [];

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-2xl transition-colors duration-300">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">{roomType ? 'Edit Room Type' : 'Add Room Type'}</h2>
        <button
          onClick={onCancel}
          className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
        >
          <XMarkIcon className="h-6 w-6" />
        </button>
      </div>

      {error && (
        <div className="bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-700 text-red-700 dark:text-red-300 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Room Type Name
          </label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Price Per Night
          </label>
          <input
            type="text"
            value={formData.pricePerNight === 0 ? '' : formData.pricePerNight.toString()}
            onChange={handlePriceChange}
            className={`w-full px-3 py-2 border ${priceError ? 'border-red-500 dark:border-red-500' : 'border-gray-300 dark:border-gray-600'} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100`}
            placeholder="Enter price (e.g., 99.99)"
            required
          />
          {priceError && (
            <p className="mt-1 text-sm text-red-600 dark:text-red-400">{priceError}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Amenities
          </label>
          <div className="mt-1">
            <div className="flex flex-wrap gap-2 mb-2">
              {amenitiesArray.map((amenity, index) => (
                <div key={index} className="bg-teal-100 dark:bg-teal-900/30 text-teal-800 dark:text-teal-300 px-2 py-1 rounded-md flex items-center">
                  <span>{amenity}</span>
                  <button
                    type="button"
                    onClick={() => handleRemoveAmenity(index)}
                    className="ml-1 text-teal-600 dark:text-teal-400 hover:text-teal-800 dark:hover:text-teal-200 transition-colors"
                  >
                    <XMarkIcon className="h-4 w-4" />
                  </button>
                </div>
              ))}
            </div>
            <div className="flex">
              <input
                type="text"
                value={newAmenity}
                onChange={(e) => setNewAmenity(e.target.value)}
                onKeyDown={handleKeyDown}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                placeholder="Add an amenity (press Enter or comma to add)"
              />
              <button
                type="button"
                onClick={handleAddAmenity}
                className="ml-2 px-3 py-2 bg-teal-600 dark:bg-teal-500 text-white rounded-md hover:bg-teal-700 dark:hover:bg-teal-600 transition-colors"
              >
                Add
              </button>
            </div>
          </div>
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
            Press Enter or comma to add an amenity
          </p>
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Images</label>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-2">
            {(formData.images || []).length > 0 && (
              <>
                {(formData.images || []).map((url, index) => (
                  <div key={index} className="relative">
                    <img
                      src={url}
                      alt={`Room image ${index + 1}`}
                      className="w-full h-32 object-cover rounded-md border border-gray-200 dark:border-gray-700"
                    />
                    <button
                      type="button"
                      onClick={() => handleRemoveImage(index)}
                      className="absolute top-1 right-1 bg-red-500 dark:bg-red-600 text-white rounded-full p-1 hover:bg-red-600 dark:hover:bg-red-700 transition-colors"
                    >
                      <XMarkIcon className="h-4 w-4" />
                    </button>
                  </div>
                ))}
              </>
            )}
          </div>
          <input
            type="file"
            accept="image/*"
            multiple
            onChange={handleImageUpload}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-teal-50 file:text-teal-700 dark:file:bg-teal-900/30 dark:file:text-teal-300 hover:file:bg-teal-100 dark:hover:file:bg-teal-900/50"
          />
        </div>

        <div className="flex justify-end space-x-2 pt-4">
          <button
            type="button"
            onClick={onCancel}
            className="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={loading}
            className="px-4 py-2 bg-teal-600 dark:bg-teal-500 text-white rounded-md hover:bg-teal-700 dark:hover:bg-teal-600 transition-colors disabled:opacity-50"
          >
            {loading ? 'Saving...' : 'Save Room Type'}
          </button>
        </div>
      </form>
    </div>
  );
} 